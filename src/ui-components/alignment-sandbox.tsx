"use client"
import { useState, useEffect } from "react";

import ScoreMatrixGrid from "./score-matrix-grid";
import PairwiseAlignments from "./pairwise-alignments";
import { GlobalAlignmentForm, Score, Direction, Alignment } from "@/lib/definitions";

/**
 * Component that functions as a "sandbox" for global alignment problems, by letting users
 * define the five initial parameters. The component then re-renders, querying /api/nw 
 * to get the score matrix and direction matrix needed to generate ScoreMatrixGrid.
 * 
 * @returns <AlignmentSandbox>, containing five input fields controlled by formState
 * and the ScoreMatrixGrid generated by the form output.
 */
export default function AlignmentSandbox( {} ) {

    const [formState, setForm] = useState({
        stringA : "GAC",
        stringB : "GAT",
        match : 1,
        mis : -1,
        gap : -2
    } as GlobalAlignmentForm);

    //prevents children from updating their settings until submit button is pressed
    const [formForGrid, setFormForGrid] = useState(formState);

    //other state variables meant for children
    const [scoreMatrix, setScoreMatrix] = useState([[]] as Score[][]);
    const [directionMatrix, setDirectionMatrix] = useState([] as Direction[][][]);
    const [alignments, setAlignments] = useState([] as Alignment[]); 

    //dummy variable to force re-render on button click
    const [updater, forceUpdate] = useState(true);

    //want effect to happen at first render and after every click of a button
    useEffect(()=>{
        async function regenerateGrid () {
            const response = await fetch("/api/nw", {
                method: "POST",
                body: JSON.stringify(formState)
            })
            //deserialize body
            const responseData = await response.json();
            //deserialize fields: each array was serialized w/ json.dumps() in Python
            setScoreMatrix(Array.from(JSON.parse(responseData.score_matrix)));
            setDirectionMatrix(Array.from(JSON.parse(responseData.direction_matrix)));
            setAlignments(Array.from(JSON.parse(responseData.alignments)));

            setFormForGrid(formState);
        }
        regenerateGrid();
    }, [updater])

    //handles changes in formState
    function handleInputChange(e : any) {
        const target = e.target as HTMLInputElement;
        const id = target.id;
        const value = target.value;
        switch (id) {
            case "stringA":
            case "stringB": {
                setForm({
                    ...formState,
                    [id] : value
                })
                break;
            }
            //event.target.value is a string even for type="number" inputs,
            //converting it back to a number just for consistency-- will
            //be stringified anyways when sending request to API
            default: {
                setForm({
                    ...formState,
                    [id] : Number(value)
                })
            }
        }
    }
    
    return(
        <div className="bg-gray-400 rounded-lg p-5">
            {/* inputs controlled by formState */}
            <div className="flex flex-row space-x-5">
                <div className="flex flex-col">
                    <label htmlFor="stringA">String A:</label>
                    <label htmlFor="stringB">String B:</label>
                    <label htmlFor="match">Match bonus:</label>
                    <label htmlFor="mis">Mismatch penalty:</label>
                    <label htmlFor="gap">Gap penalty:</label>
                </div>
                
                <div className="flex flex-col">
                    <input type="text" id="stringA" value={formState.stringA} onChange={handleInputChange} />
                    <input type="text" id="stringB" value={formState.stringB} onChange={handleInputChange} />
                    <input type="number" min={1} max={5} id="match" value={formState.match} onChange={handleInputChange} />
                    <input type="number" min={-5} max={0} id="mis" value={formState.mis} onChange={handleInputChange} />
                    <input type="number" min={-5} max={0} id="gap" value={formState.gap} onChange={handleInputChange} />
                </div>
            </div>
            
            {/* button to generate new matrix */}
            <button className="bg-green-700" onClick={()=>{forceUpdate(!updater)}}>Generate Blank Matrix</button>
            
            {/* ScoreMatrixGrid, subscribed to changes in scoreMatrix and directionMatrix */}
            <ScoreMatrixGrid 
                inputForm={formForGrid} 
                scoreMatrix={scoreMatrix} 
                directionMatrix={directionMatrix}/>

            {/* PairwiseAlignments, subscribed to changes in "alignments" */}
            <PairwiseAlignments alignments={alignments} />
        </div>
    )
}